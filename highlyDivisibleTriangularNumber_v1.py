#!/usr/bin/python
# Author: Shridhar Gadekar
# Date: 05th May 2015
# Purpose: First(lowest) Highly Divisible Triangular number having 500 divisors


"""
Highly divisible triangular number
Problem 12

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""
def divisor(number):
   divCounter = 1
   divlist = []
   i = 1
   for i in xrange(1,number+1):
      if number % i == 0:
         divCounter += 1
         if divlist.count(i) == 0:
            divlist.append(i)
            divlist.append(number / i)
         else:
            break
#   print divlist
   return len(divlist)


triangNum = 0
divisorCounter = 1
naturalNum = 1
maxdivisor = 1
diffDivisor = 0
diffInDivisor = 500

while maxdivisor <= 500:
   triangNum += naturalNum
   naturalNum += 1
   if divisor(triangNum) >= 500 :
      print divisor(triangNum), triangNum
      break
   if maxdivisor < divisor(triangNum):
      maxdivisor = divisor(triangNum)
      print "max divisor:%d and naturalNumber: %d"% (divisor(triangNum), naturalNum)
